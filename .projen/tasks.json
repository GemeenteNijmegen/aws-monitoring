{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:LogQueryJob/LogQueryJob.lambda"
        },
        {
          "spawn": "bundle:monitoringLambda/monitoring.lambda"
        },
        {
          "spawn": "bundle:OrgtrailMonitorLambda/OrgTrailMonitor.lambda"
        },
        {
          "spawn": "bundle:SecurityHubOverviewLambda/SecurityHubOverview.lambda"
        },
        {
          "spawn": "bundle:SlackInteractivityLambda/SlackInteractivity.lambda"
        },
        {
          "spawn": "bundle:TopdeskIntegrationLambda/TopdeskIntegration.lambda"
        }
      ]
    },
    "bundle:LogQueryJob/LogQueryJob.lambda": {
      "name": "bundle:LogQueryJob/LogQueryJob.lambda",
      "description": "Create a JavaScript bundle from src/LogQueryJob/LogQueryJob.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/LogQueryJob/LogQueryJob.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/LogQueryJob/LogQueryJob.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:LogQueryJob/LogQueryJob.lambda:watch": {
      "name": "bundle:LogQueryJob/LogQueryJob.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/LogQueryJob/LogQueryJob.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/LogQueryJob/LogQueryJob.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/LogQueryJob/LogQueryJob.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:monitoringLambda/monitoring.lambda": {
      "name": "bundle:monitoringLambda/monitoring.lambda",
      "description": "Create a JavaScript bundle from src/monitoringLambda/monitoring.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitoringLambda/monitoring.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/monitoringLambda/monitoring.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:monitoringLambda/monitoring.lambda:watch": {
      "name": "bundle:monitoringLambda/monitoring.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/monitoringLambda/monitoring.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitoringLambda/monitoring.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/monitoringLambda/monitoring.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:OrgtrailMonitorLambda/OrgTrailMonitor.lambda": {
      "name": "bundle:OrgtrailMonitorLambda/OrgTrailMonitor.lambda",
      "description": "Create a JavaScript bundle from src/OrgtrailMonitorLambda/OrgTrailMonitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/OrgtrailMonitorLambda/OrgTrailMonitor.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/OrgtrailMonitorLambda/OrgTrailMonitor.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:OrgtrailMonitorLambda/OrgTrailMonitor.lambda:watch": {
      "name": "bundle:OrgtrailMonitorLambda/OrgTrailMonitor.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/OrgtrailMonitorLambda/OrgTrailMonitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/OrgtrailMonitorLambda/OrgTrailMonitor.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/OrgtrailMonitorLambda/OrgTrailMonitor.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:SecurityHubOverviewLambda/SecurityHubOverview.lambda": {
      "name": "bundle:SecurityHubOverviewLambda/SecurityHubOverview.lambda",
      "description": "Create a JavaScript bundle from src/SecurityHubOverviewLambda/SecurityHubOverview.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/SecurityHubOverviewLambda/SecurityHubOverview.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/SecurityHubOverviewLambda/SecurityHubOverview.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:SecurityHubOverviewLambda/SecurityHubOverview.lambda:watch": {
      "name": "bundle:SecurityHubOverviewLambda/SecurityHubOverview.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/SecurityHubOverviewLambda/SecurityHubOverview.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/SecurityHubOverviewLambda/SecurityHubOverview.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/SecurityHubOverviewLambda/SecurityHubOverview.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:SlackInteractivityLambda/SlackInteractivity.lambda": {
      "name": "bundle:SlackInteractivityLambda/SlackInteractivity.lambda",
      "description": "Create a JavaScript bundle from src/SlackInteractivityLambda/SlackInteractivity.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/SlackInteractivityLambda/SlackInteractivity.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/SlackInteractivityLambda/SlackInteractivity.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:SlackInteractivityLambda/SlackInteractivity.lambda:watch": {
      "name": "bundle:SlackInteractivityLambda/SlackInteractivity.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/SlackInteractivityLambda/SlackInteractivity.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/SlackInteractivityLambda/SlackInteractivity.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/SlackInteractivityLambda/SlackInteractivity.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:TopdeskIntegrationLambda/TopdeskIntegration.lambda": {
      "name": "bundle:TopdeskIntegrationLambda/TopdeskIntegration.lambda",
      "description": "Create a JavaScript bundle from src/TopdeskIntegrationLambda/TopdeskIntegration.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/TopdeskIntegrationLambda/TopdeskIntegration.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/TopdeskIntegrationLambda/TopdeskIntegration.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:TopdeskIntegrationLambda/TopdeskIntegration.lambda:watch": {
      "name": "bundle:TopdeskIntegrationLambda/TopdeskIntegration.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/TopdeskIntegrationLambda/TopdeskIntegration.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/TopdeskIntegrationLambda/TopdeskIntegration.lambda.ts --target=\"node20\" --platform=\"node\" --outfile=\"assets/TopdeskIntegrationLambda/TopdeskIntegration.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploys your CDK app to the AWS cloud",
      "steps": [
        {
          "exec": "cdk deploy",
          "receiveArgs": true
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "cdk destroy",
          "receiveArgs": true
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "cdk diff"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools .projenrc.js",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "lint": {
      "name": "lint",
      "steps": [
        {
          "exec": "cfn-lint cdk.out/**/*.template.json -i W3005 W2001"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "npm pack --pack-destination dist/js"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true",
        "MAJOR": "0"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "cdk synth -q"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@gemeentenijmegen/projen-project-type,@types/jest,@types/node,aws-sdk-client-mock,axios-mock-adapter,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,projen,ts-jest,ts-node,typescript,@aws-cdk/aws-apigatewayv2-alpha,@aws-cdk/aws-apigatewayv2-integrations-alpha,@aws-sdk/client-cloudwatch-logs,@aws-sdk/client-organizations,@aws-sdk/client-s3,@aws-sdk/client-securityhub,@aws-sdk/client-sns,@aws-sdk/client-sqs,@aws-sdk/client-sts,@gemeentenijmegen/aws-constructs,@gemeentenijmegen/utils,@types/aws-lambda,axios,cdk-nag,cdk-stacksets"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @gemeentenijmegen/projen-project-type @stylistic/eslint-plugin @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk aws-sdk-client-mock axios-mock-adapter commit-and-tag-version esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit projen ts-jest ts-node typescript @aws-cdk/aws-apigatewayv2-alpha @aws-cdk/aws-apigatewayv2-integrations-alpha @aws-sdk/client-cloudwatch-logs @aws-sdk/client-organizations @aws-sdk/client-s3 @aws-sdk/client-securityhub @aws-sdk/client-sns @aws-sdk/client-sqs @aws-sdk/client-sts @gemeentenijmegen/aws-constructs @gemeentenijmegen/utils @types/aws-lambda aws-cdk-lib axios cdk-nag cdk-stacksets constructs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
